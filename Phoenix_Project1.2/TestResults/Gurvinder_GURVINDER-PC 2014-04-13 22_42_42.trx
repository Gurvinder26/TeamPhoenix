<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="c87fac83-9e43-4e0a-b7fc-a9e2e861cfa0" name="Gurvinder@GURVINDER-PC 2014-04-13 22:42:42" runUser="Gurvinder-PC\Gurvinder" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Default Test Settings" id="0420a61a-6be0-46e9-831f-6fddfe39d52d">
    <Deployment runDeploymentRoot="Gurvinder_GURVINDER-PC 2014-04-13 22_42_42">
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Client.5.0.0\lib\net45\System.Net.Http.Formatting.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Razor.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Mvc.5.0.0\lib\net45\System.Web.Mvc.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Core.5.0.0\lib\net45\System.Web.Http.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.Helpers.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Deployment.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.WebHost.5.0.0\lib\net45\System.Web.Http.WebHost.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\CodedUI.jQueryExtensions.1.0.3.0\lib\net40\CodedUI.jQueryExtensions.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\Phoenix_Project\bin\Phoenix_Project.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2014-04-13T22:42:42.4527203-04:00" queuing="2014-04-13T22:42:44.0498116-04:00" start="2014-04-13T22:42:44.3188270-04:00" finish="2014-04-13T22:43:33.0116121-04:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="c:\users\gurvinder\documents\visual studio 2013\projects\phoenix_project\phoenix_project.tests\webtest1.webtest" id="2714de8b-4e7d-4fb6-a0d1-64d8c662ac5a" persistedWebTest="">
      <Execution id="24476d25-7616-4087-90d0-26c92f5e2781" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="2714de8b-4e7d-4fb6-a0d1-64d8c662ac5a" executionId="24476d25-7616-4087-90d0-26c92f5e2781" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="24476d25-7616-4087-90d0-26c92f5e2781" testId="2714de8b-4e7d-4fb6-a0d1-64d8c662ac5a" testName="WebTest1" computerName="GURVINDER-PC" duration="00:00:37.8149727" startTime="2014-04-13T22:42:44.4648353-04:00" endTime="2014-04-13T22:43:32.9586090-04:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24476d25-7616-4087-90d0-26c92f5e2781">
      <Output>
        <ErrorInfo>
          <Message>4 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Default Test Settings" id="0420a61a-6be0-46e9-831f-6fddfe39d52d">
        <Deployment runDeploymentRoot="Gurvinder_GURVINDER-PC 2014-04-13 22_42_42">
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Client.5.0.0\lib\net45\System.Net.Http.Formatting.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Razor.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Mvc.5.0.0\lib\net45\System.Web.Mvc.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Core.5.0.0\lib\net45\System.Web.Http.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.Helpers.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Deployment.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.WebHost.5.0.0\lib\net45\System.Web.Http.WebHost.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\Phoenix_Project\bin\Phoenix_Project.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\CodedUI.jQueryExtensions.1.0.3.0\lib\net40\CodedUI.jQueryExtensions.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.dll" />
        </Deployment>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Properties />
      </TestSettings>
      <WebTestResultFilePath>Gurvinder_GURVINDER-PC 2014-04-13 22_42_42\In\24476d25-7616-4087-90d0-26c92f5e2781\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>