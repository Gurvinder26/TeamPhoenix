<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="ca682935-a896-4eed-bc47-b82d1b23f684" name="Gurvinder@GURVINDER-PC 2014-04-14 00:05:26" runUser="Gurvinder-PC\Gurvinder" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Default Test Settings" id="a6bccb07-0bef-44ac-b8b3-88ae43e893bf">
    <Deployment runDeploymentRoot="Gurvinder_GURVINDER-PC 2014-04-14 00_05_26">
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Client.5.0.0\lib\net45\System.Net.Http.Formatting.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Razor.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Mvc.5.0.0\lib\net45\System.Web.Mvc.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Core.5.0.0\lib\net45\System.Web.Http.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.Helpers.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Deployment.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.WebHost.5.0.0\lib\net45\System.Web.Http.WebHost.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\CodedUI.jQueryExtensions.1.0.3.0\lib\net40\CodedUI.jQueryExtensions.dll" />
      <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\Phoenix_Project\bin\Phoenix_Project.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2014-04-14T00:05:26.8603301-04:00" queuing="2014-04-14T00:05:49.7496393-04:00" start="2014-04-14T00:05:49.8626457-04:00" finish="2014-04-14T00:07:04.3389055-04:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest2" storage="c:\users\gurvinder\documents\visual studio 2013\projects\phoenix_project\phoenix_project.tests\webtest2.webtest" id="fec2578c-669e-4592-a2a9-8e064c896d53" persistedWebTest="">
      <Execution id="2f1accdc-e5c7-4a9a-84f3-c489665be43c" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="fec2578c-669e-4592-a2a9-8e064c896d53" executionId="2f1accdc-e5c7-4a9a-84f3-c489665be43c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="2f1accdc-e5c7-4a9a-84f3-c489665be43c" testId="fec2578c-669e-4592-a2a9-8e064c896d53" testName="WebTest2" computerName="GURVINDER-PC" duration="00:01:03.6822485" startTime="2014-04-14T00:05:49.9716520-04:00" endTime="2014-04-14T00:07:04.2769020-04:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f1accdc-e5c7-4a9a-84f3-c489665be43c">
      <Output>
        <ErrorInfo>
          <Message>7 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest2.webtestResult" />
      </ResultFiles>
      <TestSettings name="Default Test Settings" id="a6bccb07-0bef-44ac-b8b3-88ae43e893bf">
        <Deployment runDeploymentRoot="Gurvinder_GURVINDER-PC 2014-04-14 00_05_26">
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Client.5.0.0\lib\net45\System.Net.Http.Formatting.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Razor.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Mvc.5.0.0\lib\net45\System.Web.Mvc.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.Core.5.0.0\lib\net45\System.Web.Http.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.Helpers.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.Deployment.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebApi.WebHost.5.0.0\lib\net45\System.Web.Http.WebHost.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.Razor.3.0.0\lib\net45\System.Web.Razor.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\Phoenix_Project\bin\Phoenix_Project.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\CodedUI.jQueryExtensions.1.0.3.0\lib\net40\CodedUI.jQueryExtensions.dll" />
          <DeploymentItem filename="C:\Users\Gurvinder\Documents\Visual Studio 2013\Projects\Phoenix_Project\packages\Microsoft.AspNet.WebPages.3.0.0\lib\net45\System.Web.WebPages.dll" />
        </Deployment>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Properties />
      </TestSettings>
      <WebTestResultFilePath>Gurvinder_GURVINDER-PC 2014-04-14 00_05_26\In\2f1accdc-e5c7-4a9a-84f3-c489665be43c\WebTest2.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>